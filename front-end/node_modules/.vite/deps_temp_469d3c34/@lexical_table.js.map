{
  "version": 3,
  "sources": ["../../../../node_modules/@lexical/table/LexicalTable.dev.js", "../../../../node_modules/@lexical/table/LexicalTable.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar lexical = require('lexical');\nvar utils = require('@lexical/utils');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PIXEL_VALUE_REG_EXP = /^(\\d+(?:\\.\\d+)?)px$/;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst TableCellHeaderStates = {\n  BOTH: 3,\n  COLUMN: 2,\n  NO_STATUS: 0,\n  ROW: 1\n};\n\n/** @noInheritDoc */\nclass TableCellNode extends lexical.DEPRECATED_GridCellNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'tablecell';\n  }\n\n  static clone(node) {\n    const cellNode = new TableCellNode(node.__headerState, node.__colSpan, node.__width, node.__key);\n    cellNode.__rowSpan = node.__rowSpan;\n    cellNode.__backgroundColor = node.__backgroundColor;\n    return cellNode;\n  }\n\n  static importDOM() {\n    return {\n      td: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      }),\n      th: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const colSpan = serializedNode.colSpan || 1;\n    const rowSpan = serializedNode.rowSpan || 1;\n    const cellNode = $createTableCellNode(serializedNode.headerState, colSpan, serializedNode.width || undefined);\n    cellNode.__rowSpan = rowSpan;\n    cellNode.__backgroundColor = serializedNode.backgroundColor || null;\n    return cellNode;\n  }\n\n  constructor(headerState = TableCellHeaderStates.NO_STATUS, colSpan = 1, width, key) {\n    super(colSpan, key);\n    this.__headerState = headerState;\n    this.__width = width;\n    this.__backgroundColor = null;\n  }\n\n  createDOM(config) {\n    const element = document.createElement(this.getTag());\n\n    if (this.__width) {\n      element.style.width = `${this.__width}px`;\n    }\n\n    if (this.__colSpan > 1) {\n      element.colSpan = this.__colSpan;\n    }\n\n    if (this.__rowSpan > 1) {\n      element.rowSpan = this.__rowSpan;\n    }\n\n    if (this.__backgroundColor !== null) {\n      element.style.backgroundColor = this.__backgroundColor;\n    }\n\n    utils.addClassNamesToElement(element, config.theme.tableCell, this.hasHeader() && config.theme.tableCellHeader);\n    return element;\n  }\n\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n\n    if (element) {\n      const element_ = element;\n      const maxWidth = 700;\n      const colCount = this.getParentOrThrow().getChildrenSize();\n      element_.style.border = '1px solid black';\n\n      if (this.__colSpan > 1) {\n        element_.colSpan = this.__colSpan;\n      }\n\n      if (this.__rowSpan > 1) {\n        element_.rowSpan = this.__rowSpan;\n      }\n\n      element_.style.width = `${this.getWidth() || Math.max(90, maxWidth / colCount)}px`;\n      element_.style.verticalAlign = 'top';\n      element_.style.textAlign = 'start';\n      const backgroundColor = this.getBackgroundColor();\n\n      if (backgroundColor !== null) {\n        element_.style.backgroundColor = backgroundColor;\n      } else if (this.hasHeader()) {\n        element_.style.backgroundColor = '#f2f3f5';\n      }\n    }\n\n    return {\n      element\n    };\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      backgroundColor: this.getBackgroundColor(),\n      headerState: this.__headerState,\n      type: 'tablecell',\n      width: this.getWidth()\n    };\n  }\n\n  getTag() {\n    return this.hasHeader() ? 'th' : 'td';\n  }\n\n  setHeaderStyles(headerState) {\n    const self = this.getWritable();\n    self.__headerState = headerState;\n    return this.__headerState;\n  }\n\n  getHeaderStyles() {\n    return this.getLatest().__headerState;\n  }\n\n  setWidth(width) {\n    const self = this.getWritable();\n    self.__width = width;\n    return this.__width;\n  }\n\n  getWidth() {\n    return this.getLatest().__width;\n  }\n\n  getBackgroundColor() {\n    return this.getLatest().__backgroundColor;\n  }\n\n  setBackgroundColor(newBackgroundColor) {\n    this.getWritable().__backgroundColor = newBackgroundColor;\n  }\n\n  toggleHeaderStyle(headerStateToToggle) {\n    const self = this.getWritable();\n\n    if ((self.__headerState & headerStateToToggle) === headerStateToToggle) {\n      self.__headerState -= headerStateToToggle;\n    } else {\n      self.__headerState += headerStateToToggle;\n    }\n\n    return self;\n  }\n\n  hasHeaderState(headerState) {\n    return (this.getHeaderStyles() & headerState) === headerState;\n  }\n\n  hasHeader() {\n    return this.getLatest().__headerState !== TableCellHeaderStates.NO_STATUS;\n  }\n\n  updateDOM(prevNode) {\n    return prevNode.__headerState !== this.__headerState || prevNode.__width !== this.__width || prevNode.__colSpan !== this.__colSpan || prevNode.__rowSpan !== this.__rowSpan || prevNode.__backgroundColor !== this.__backgroundColor;\n  }\n\n  isShadowRoot() {\n    return true;\n  }\n\n  collapseAtStart() {\n    return true;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n}\nfunction convertTableCellNodeElement(domNode) {\n  const domNode_ = domNode;\n  const nodeName = domNode.nodeName.toLowerCase();\n  let width = undefined;\n\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.width)) {\n    width = parseFloat(domNode_.style.width);\n  }\n\n  const tableCellNode = $createTableCellNode(nodeName === 'th' ? TableCellHeaderStates.ROW : TableCellHeaderStates.NO_STATUS, domNode_.colSpan, width);\n  tableCellNode.__rowSpan = domNode_.rowSpan;\n  const backgroundColor = domNode_.style.backgroundColor;\n\n  if (backgroundColor !== '') {\n    tableCellNode.__backgroundColor = backgroundColor;\n  }\n\n  return {\n    forChild: (lexicalNode, parentLexicalNode) => {\n      if ($isTableCellNode(parentLexicalNode) && !lexical.$isElementNode(lexicalNode)) {\n        const paragraphNode = lexical.$createParagraphNode();\n\n        if (lexical.$isLineBreakNode(lexicalNode) && lexicalNode.getTextContent() === '\\n') {\n          return null;\n        }\n\n        paragraphNode.append(lexicalNode);\n        return paragraphNode;\n      }\n\n      return lexicalNode;\n    },\n    node: tableCellNode\n  };\n}\nfunction $createTableCellNode(headerState, colSpan = 1, width) {\n  return lexical.$applyNodeReplacement(new TableCellNode(headerState, colSpan, width));\n}\nfunction $isTableCellNode(node) {\n  return node instanceof TableCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TableRowNode extends lexical.DEPRECATED_GridRowNode {\n  /** @internal */\n  static getType() {\n    return 'tablerow';\n  }\n\n  static clone(node) {\n    return new TableRowNode(node.__height, node.__key);\n  }\n\n  static importDOM() {\n    return {\n      tr: node => ({\n        conversion: convertTableRowElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    return $createTableRowNode(serializedNode.height);\n  }\n\n  constructor(height, key) {\n    super(key);\n    this.__height = height;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'tablerow',\n      version: 1\n    };\n  }\n\n  createDOM(config) {\n    const element = document.createElement('tr');\n\n    if (this.__height) {\n      element.style.height = `${this.__height}px`;\n    }\n\n    utils.addClassNamesToElement(element, config.theme.tableRow);\n    return element;\n  }\n\n  isShadowRoot() {\n    return true;\n  }\n\n  setHeight(height) {\n    const self = this.getWritable();\n    self.__height = height;\n    return this.__height;\n  }\n\n  getHeight() {\n    return this.getLatest().__height;\n  }\n\n  updateDOM(prevNode) {\n    return prevNode.__height !== this.__height;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n}\nfunction convertTableRowElement(domNode) {\n  const domNode_ = domNode;\n  let height = undefined;\n\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.height)) {\n    height = parseFloat(domNode_.style.height);\n  }\n\n  return {\n    node: $createTableRowNode(height)\n  };\n}\nfunction $createTableRowNode(height) {\n  return lexical.$applyNodeReplacement(new TableRowNode(height));\n}\nfunction $isTableRowNode(node) {\n  return node instanceof TableRowNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst getDOMSelection = targetWindow => CAN_USE_DOM ? (targetWindow || window).getSelection() : null;\n\nclass TableSelection {\n  constructor(editor, tableNodeKey) {\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.listenersToRemove = new Set();\n    this.tableNodeKey = tableNodeKey;\n    this.editor = editor;\n    this.grid = {\n      cells: [],\n      columns: 0,\n      rows: 0\n    };\n    this.gridSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.trackTableGrid();\n  }\n\n  getGrid() {\n    return this.grid;\n  }\n\n  removeListeners() {\n    Array.from(this.listenersToRemove).forEach(removeListener => removeListener());\n  }\n\n  trackTableGrid() {\n    const observer = new MutationObserver(records => {\n      this.editor.update(() => {\n        let gridNeedsRedraw = false;\n\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const target = record.target;\n          const nodeName = target.nodeName;\n\n          if (nodeName === 'TABLE' || nodeName === 'TR') {\n            gridNeedsRedraw = true;\n            break;\n          }\n        }\n\n        if (!gridNeedsRedraw) {\n          return;\n        }\n\n        const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n        if (!tableElement) {\n          throw new Error('Expected to find TableElement in DOM');\n        }\n\n        this.grid = getTableGrid(tableElement);\n      });\n    });\n    this.editor.update(() => {\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      this.grid = getTableGrid(tableElement);\n      observer.observe(tableElement, {\n        childList: true,\n        subtree: true\n      });\n    });\n  }\n\n  clearHighlight() {\n    const editor = this.editor;\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.gridSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.enableHighlightStyle();\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      const grid = getTableGrid(tableElement);\n      $updateDOMForSelection(editor, grid, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n\n  enableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      utils.removeClassNamesFromElement(tableElement, editor._config.theme.tableSelection);\n      tableElement.classList.remove('disable-selection');\n      this.hasHijackedSelectionStyles = false;\n    });\n  }\n\n  disableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      utils.addClassNamesToElement(tableElement, editor._config.theme.tableSelection);\n      this.hasHijackedSelectionStyles = true;\n    });\n  }\n\n  updateTableGridSelection(selection) {\n    if (selection != null && selection.gridKey === this.tableNodeKey) {\n      const editor = this.editor;\n      this.gridSelection = selection;\n      this.isHighlightingCells = true;\n      this.disableHighlightStyle();\n      $updateDOMForSelection(editor, this.grid, this.gridSelection);\n    } else if (selection == null) {\n      this.clearHighlight();\n    }\n  }\n\n  setFocusCellForSelection(cell, ignoreStart = false) {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n\n      const cellX = cell.x;\n      const cellY = cell.y;\n      this.focusCell = cell;\n\n      if (this.anchorCell !== null) {\n        const domSelection = getDOMSelection(editor._window); // Collapse the selection\n\n        if (domSelection) {\n          domSelection.setBaseAndExtent(this.anchorCell.elem, 0, this.focusCell.elem, 0);\n        }\n      }\n\n      if (!this.isHighlightingCells && (this.anchorX !== cellX || this.anchorY !== cellY || ignoreStart)) {\n        this.isHighlightingCells = true;\n        this.disableHighlightStyle();\n      } else if (cellX === this.focusX && cellY === this.focusY) {\n        return;\n      }\n\n      this.focusX = cellX;\n      this.focusY = cellY;\n\n      if (this.isHighlightingCells) {\n        const focusTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n        if (this.gridSelection != null && this.anchorCellNodeKey != null && $isTableCellNode(focusTableCellNode)) {\n          const focusNodeKey = focusTableCellNode.getKey();\n          this.gridSelection = this.gridSelection.clone() || lexical.DEPRECATED_$createGridSelection();\n          this.focusCellNodeKey = focusNodeKey;\n          this.gridSelection.set(this.tableNodeKey, this.anchorCellNodeKey, this.focusCellNodeKey);\n          lexical.$setSelection(this.gridSelection);\n          editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n          $updateDOMForSelection(editor, this.grid, this.gridSelection);\n        }\n      }\n    });\n  }\n\n  setAnchorCellForSelection(cell) {\n    this.isHighlightingCells = false;\n    this.anchorCell = cell;\n    this.anchorX = cell.x;\n    this.anchorY = cell.y;\n    this.editor.update(() => {\n      const anchorTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n      if ($isTableCellNode(anchorTableCellNode)) {\n        const anchorNodeKey = anchorTableCellNode.getKey();\n        this.gridSelection = lexical.DEPRECATED_$createGridSelection();\n        this.anchorCellNodeKey = anchorNodeKey;\n      }\n    });\n  }\n\n  formatCells(type) {\n    this.editor.update(() => {\n      const selection = lexical.$getSelection();\n\n      if (!lexical.DEPRECATED_$isGridSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n\n      const formatSelection = lexical.$createRangeSelection();\n      const anchor = formatSelection.anchor;\n      const focus = formatSelection.focus;\n      selection.getNodes().forEach(cellNode => {\n        if ($isTableCellNode(cellNode) && cellNode.getTextContentSize() !== 0) {\n          anchor.set(cellNode.getKey(), 0, 'element');\n          focus.set(cellNode.getKey(), cellNode.getChildrenSize(), 'element');\n          formatSelection.formatText(type);\n        }\n      });\n      lexical.$setSelection(selection);\n      this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n\n  clearText() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n\n      const selection = lexical.$getSelection();\n\n      if (!lexical.DEPRECATED_$isGridSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n\n      const selectedNodes = selection.getNodes().filter($isTableCellNode);\n\n      if (selectedNodes.length === this.grid.columns * this.grid.rows) {\n        tableNode.selectPrevious(); // Delete entire table\n\n        tableNode.remove();\n        const rootNode = lexical.$getRoot();\n        rootNode.selectStart();\n        return;\n      }\n\n      selectedNodes.forEach(cellNode => {\n        if (lexical.$isElementNode(cellNode)) {\n          const paragraphNode = lexical.$createParagraphNode();\n          const textNode = lexical.$createTextNode();\n          paragraphNode.append(textNode);\n          cellNode.append(paragraphNode);\n          cellNode.getChildren().forEach(child => {\n            if (child !== paragraphNode) {\n              child.remove();\n            }\n          });\n        }\n      });\n      $updateDOMForSelection(editor, this.grid, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst LEXICAL_ELEMENT_KEY = '__lexicalTableSelection';\nfunction applyTableHandlers(tableNode, tableElement, editor, hasTabHandler) {\n  const rootElement = editor.getRootElement();\n\n  if (rootElement === null) {\n    throw new Error('No root element.');\n  }\n\n  const tableSelection = new TableSelection(editor, tableNode.getKey());\n  const editorWindow = editor._window || window;\n  attachTableSelectionToTableElement(tableElement, tableSelection);\n  tableElement.addEventListener('mousedown', event => {\n    setTimeout(() => {\n      if (event.button !== 0) {\n        return;\n      }\n\n      if (!editorWindow) {\n        return;\n      }\n\n      const anchorCell = getCellFromTarget(event.target);\n\n      if (anchorCell !== null) {\n        stopEvent(event);\n        tableSelection.setAnchorCellForSelection(anchorCell);\n      }\n\n      const onMouseUp = () => {\n        editorWindow.removeEventListener('mouseup', onMouseUp);\n        editorWindow.removeEventListener('mousemove', onMouseMove);\n      };\n\n      const onMouseMove = moveEvent => {\n        const focusCell = getCellFromTarget(moveEvent.target);\n\n        if (focusCell !== null && (tableSelection.anchorX !== focusCell.x || tableSelection.anchorY !== focusCell.y)) {\n          moveEvent.preventDefault();\n          tableSelection.setFocusCellForSelection(focusCell);\n        }\n      };\n\n      editorWindow.addEventListener('mouseup', onMouseUp);\n      editorWindow.addEventListener('mousemove', onMouseMove);\n    }, 0);\n  }); // Clear selection when clicking outside of dom.\n\n  const mouseDownCallback = event => {\n    if (event.button !== 0) {\n      return;\n    }\n\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n      const target = event.target;\n\n      if (lexical.DEPRECATED_$isGridSelection(selection) && selection.gridKey === tableSelection.tableNodeKey && rootElement.contains(target)) {\n        tableSelection.clearHighlight();\n      }\n    });\n  };\n\n  editorWindow.addEventListener('mousedown', mouseDownCallback);\n  tableSelection.listenersToRemove.add(() => editorWindow.removeEventListener('mousedown', mouseDownCallback));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => $handleArrowKey(editor, event, 'down', tableNode, tableSelection), lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => $handleArrowKey(editor, event, 'up', tableNode, tableSelection), lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => $handleArrowKey(editor, event, 'backward', tableNode, tableSelection), lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => $handleArrowKey(editor, event, 'forward', tableNode, tableSelection), lexical.COMMAND_PRIORITY_HIGH));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      const focusCellNode = utils.$findMatchingParent(selection.focus.getNode(), $isTableCellNode);\n\n      if ($isTableCellNode(focusCellNode)) {\n        stopEvent(event);\n        focusCellNode.selectEnd();\n        return true;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n\n  const deleteTextHandler = command => () => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      tableSelection.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n\n      const anchorNode = selection.anchor.getNode();\n      const focusNode = selection.focus.getNode();\n      const isAnchorInside = tableNode.isParentOf(anchorNode);\n      const isFocusInside = tableNode.isParentOf(focusNode);\n      const selectionContainsPartialTable = isAnchorInside && !isFocusInside || isFocusInside && !isAnchorInside;\n\n      if (selectionContainsPartialTable) {\n        tableSelection.clearText();\n        return true;\n      }\n\n      const nearestElementNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n      const topLevelCellElementNode = nearestElementNode && utils.$findMatchingParent(nearestElementNode, n => lexical.$isElementNode(n) && $isTableCellNode(n.getParent()));\n\n      if (!lexical.$isElementNode(topLevelCellElementNode) || !lexical.$isElementNode(nearestElementNode)) {\n        return false;\n      }\n\n      if (command === lexical.DELETE_LINE_COMMAND && topLevelCellElementNode.getPreviousSibling() === null) {\n        // TODO: Fix Delete Line in Table Cells.\n        return true;\n      }\n\n      if (command === lexical.DELETE_CHARACTER_COMMAND || command === lexical.DELETE_WORD_COMMAND) {\n        if (selection.isCollapsed() && selection.anchor.offset === 0) {\n          if (nearestElementNode !== topLevelCellElementNode) {\n            const children = nearestElementNode.getChildren();\n            const newParagraphNode = lexical.$createParagraphNode();\n            children.forEach(child => newParagraphNode.append(child));\n            nearestElementNode.replace(newParagraphNode);\n            nearestElementNode.getWritable().__parent = tableCellNode.getKey();\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  [lexical.DELETE_WORD_COMMAND, lexical.DELETE_LINE_COMMAND, lexical.DELETE_CHARACTER_COMMAND].forEach(command => {\n    tableSelection.listenersToRemove.add(editor.registerCommand(command, deleteTextHandler(command), lexical.COMMAND_PRIORITY_CRITICAL));\n  });\n\n  const deleteCellHandler = event => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      event.preventDefault();\n      event.stopPropagation();\n      tableSelection.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n\n    return false;\n  };\n\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_DELETE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      tableSelection.formatCells(payload);\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n\n    if (lexical.DEPRECATED_$isGridSelection(selection)) {\n      tableSelection.clearHighlight();\n      return false;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n\n  if (hasTabHandler) {\n    tableSelection.listenersToRemove.add(editor.registerCommand(lexical.KEY_TAB_COMMAND, event => {\n      const selection = lexical.$getSelection();\n\n      if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed() || !$isSelectionInTable(selection, tableNode)) {\n        return false;\n      }\n\n      const tableCellNode = $findCellNode(selection.anchor.getNode());\n\n      if (tableCellNode === null) {\n        return false;\n      }\n\n      stopEvent(event);\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n      selectGridNodeInDirection(tableSelection, tableNode, currentCords.x, currentCords.y, !event.shiftKey ? 'forward' : 'backward');\n      return true;\n    }, lexical.COMMAND_PRIORITY_CRITICAL));\n  }\n\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.FOCUS_COMMAND, payload => {\n    return tableNode.isSelected();\n  }, lexical.COMMAND_PRIORITY_HIGH));\n\n  function getCellFromCellNode(tableCellNode) {\n    const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableSelection.grid);\n    return tableNode.getCellFromCordsOrThrow(currentCords.x, currentCords.y, tableSelection.grid);\n  }\n\n  tableSelection.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_CHANGE_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    const prevSelection = lexical.$getPreviousSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      const {\n        anchor,\n        focus\n      } = selection;\n      const anchorNode = anchor.getNode();\n      const focusNode = focus.getNode(); // Using explicit comparison with table node to ensure it's not a nested table\n      // as in that case we'll leave selection resolving to that table\n\n      const anchorCellNode = $findCellNode(anchorNode);\n      const focusCellNode = $findCellNode(focusNode);\n      const isAnchorInside = anchorCellNode && tableNode.is($findTableNode(anchorCellNode));\n      const isFocusInside = focusCellNode && tableNode.is($findTableNode(focusCellNode));\n      const isPartialyWithinTable = isAnchorInside !== isFocusInside;\n      const isWithinTable = isAnchorInside && isFocusInside;\n      const isBackward = selection.isBackward();\n\n      if (isPartialyWithinTable) {\n        const newSelection = selection.clone();\n        newSelection.focus.set(tableNode.getKey(), isBackward ? 0 : tableNode.getChildrenSize(), 'element');\n        lexical.$setSelection(newSelection);\n        $addHighlightStyleToTable(editor, tableSelection);\n      } else if (isWithinTable) {\n        // Handle case when selection spans across multiple cells but still\n        // has range selection, then we convert it into grid selection\n        if (!anchorCellNode.is(focusCellNode)) {\n          tableSelection.setAnchorCellForSelection(getCellFromCellNode(anchorCellNode));\n          tableSelection.setFocusCellForSelection(getCellFromCellNode(focusCellNode), true);\n        }\n      }\n    }\n\n    if (selection && !selection.is(prevSelection) && (lexical.DEPRECATED_$isGridSelection(selection) || lexical.DEPRECATED_$isGridSelection(prevSelection)) && tableSelection.gridSelection && !tableSelection.gridSelection.is(prevSelection)) {\n      if (lexical.DEPRECATED_$isGridSelection(selection) && selection.gridKey === tableSelection.tableNodeKey) {\n        tableSelection.updateTableGridSelection(selection);\n      } else if (!lexical.DEPRECATED_$isGridSelection(selection) && lexical.DEPRECATED_$isGridSelection(prevSelection) && prevSelection.gridKey === tableSelection.tableNodeKey) {\n        tableSelection.updateTableGridSelection(null);\n      }\n\n      return false;\n    }\n\n    if (tableSelection.hasHijackedSelectionStyles && !tableNode.isSelected()) {\n      $removeHighlightStyleToTable(editor, tableSelection);\n    } else if (!tableSelection.hasHijackedSelectionStyles && tableNode.isSelected()) {\n      $addHighlightStyleToTable(editor, tableSelection);\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  return tableSelection;\n}\nfunction attachTableSelectionToTableElement(tableElement, tableSelection) {\n  tableElement[LEXICAL_ELEMENT_KEY] = tableSelection;\n}\nfunction getTableSelectionFromTableElement(tableElement) {\n  return tableElement[LEXICAL_ELEMENT_KEY];\n}\nfunction getCellFromTarget(node) {\n  let currentNode = node;\n\n  while (currentNode != null) {\n    const nodeName = currentNode.nodeName;\n\n    if (nodeName === 'TD' || nodeName === 'TH') {\n      // @ts-expect-error: internal field\n      const cell = currentNode._cell;\n\n      if (cell === undefined) {\n        return null;\n      }\n\n      return cell;\n    }\n\n    currentNode = currentNode.parentNode;\n  }\n\n  return null;\n}\nfunction getTableGrid(tableElement) {\n  const cells = [];\n  const grid = {\n    cells,\n    columns: 0,\n    rows: 0\n  };\n  let currentNode = tableElement.firstChild;\n  let x = 0;\n  let y = 0;\n  cells.length = 0;\n\n  while (currentNode != null) {\n    const nodeMame = currentNode.nodeName;\n\n    if (nodeMame === 'TD' || nodeMame === 'TH') {\n      const elem = currentNode;\n      const cell = {\n        elem,\n        hasBackgroundColor: elem.style.backgroundColor !== '',\n        highlighted: false,\n        x,\n        y\n      }; // @ts-expect-error: internal field\n\n      currentNode._cell = cell;\n      let row = cells[y];\n\n      if (row === undefined) {\n        row = cells[y] = [];\n      }\n\n      row[x] = cell;\n    } else {\n      const child = currentNode.firstChild;\n\n      if (child != null) {\n        currentNode = child;\n        continue;\n      }\n    }\n\n    const sibling = currentNode.nextSibling;\n\n    if (sibling != null) {\n      x++;\n      currentNode = sibling;\n      continue;\n    }\n\n    const parent = currentNode.parentNode;\n\n    if (parent != null) {\n      const parentSibling = parent.nextSibling;\n\n      if (parentSibling == null) {\n        break;\n      }\n\n      y++;\n      x = 0;\n      currentNode = parentSibling;\n    }\n  }\n\n  grid.columns = x + 1;\n  grid.rows = y + 1;\n  return grid;\n}\nfunction $updateDOMForSelection(editor, grid, selection) {\n  const selectedCellNodes = new Set(selection ? selection.getNodes() : []);\n  $forEachGridCell(grid, (cell, lexicalNode) => {\n    const elem = cell.elem;\n\n    if (selectedCellNodes.has(lexicalNode)) {\n      cell.highlighted = true;\n      $addHighlightToDOM(editor, cell);\n    } else {\n      cell.highlighted = false;\n      $removeHighlightFromDOM(editor, cell);\n\n      if (!elem.getAttribute('style')) {\n        elem.removeAttribute('style');\n      }\n    }\n  });\n}\nfunction $forEachGridCell(grid, cb) {\n  const {\n    cells\n  } = grid;\n\n  for (let y = 0; y < cells.length; y++) {\n    const row = cells[y];\n\n    if (!row) {\n      continue;\n    }\n\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n\n      if (!cell) {\n        continue;\n      }\n\n      const lexicalNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n      if (lexicalNode !== null) {\n        cb(cell, lexicalNode, {\n          x,\n          y\n        });\n      }\n    }\n  }\n}\nfunction $addHighlightStyleToTable(editor, tableSelection) {\n  tableSelection.disableHighlightStyle();\n  $forEachGridCell(tableSelection.grid, cell => {\n    cell.highlighted = true;\n    $addHighlightToDOM(editor, cell);\n  });\n}\nfunction $removeHighlightStyleToTable(editor, tableSelection) {\n  tableSelection.enableHighlightStyle();\n  $forEachGridCell(tableSelection.grid, cell => {\n    const elem = cell.elem;\n    cell.highlighted = false;\n    $removeHighlightFromDOM(editor, cell);\n\n    if (!elem.getAttribute('style')) {\n      elem.removeAttribute('style');\n    }\n  });\n}\n\nconst selectGridNodeInDirection = (tableSelection, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableSelection.grid.columns - 1 : 0)) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableSelection.grid), isForward);\n      } else {\n        if (y !== (isForward ? tableSelection.grid.rows - 1 : 0)) {\n          selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(isForward ? 0 : tableSelection.grid.columns - 1, y + (isForward ? 1 : -1), tableSelection.grid), isForward);\n        } else if (!isForward) {\n          tableNode.selectPrevious();\n        } else {\n          tableNode.selectNext();\n        }\n      }\n\n      return true;\n\n    case 'up':\n      if (y !== 0) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y - 1, tableSelection.grid), false);\n      } else {\n        tableNode.selectPrevious();\n      }\n\n      return true;\n\n    case 'down':\n      if (y !== tableSelection.grid.rows - 1) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y + 1, tableSelection.grid), true);\n      } else {\n        tableNode.selectNext();\n      }\n\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nconst adjustFocusNodeInDirection = (tableSelection, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableSelection.grid.columns - 1 : 0)) {\n        tableSelection.setFocusCellForSelection(tableNode.getCellFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableSelection.grid));\n      }\n\n      return true;\n\n    case 'up':\n      if (y !== 0) {\n        tableSelection.setFocusCellForSelection(tableNode.getCellFromCordsOrThrow(x, y - 1, tableSelection.grid));\n        return true;\n      } else {\n        return false;\n      }\n\n    case 'down':\n      if (y !== tableSelection.grid.rows - 1) {\n        tableSelection.setFocusCellForSelection(tableNode.getCellFromCordsOrThrow(x, y + 1, tableSelection.grid));\n        return true;\n      } else {\n        return false;\n      }\n\n    default:\n      return false;\n  }\n};\n\nfunction $isSelectionInTable(selection, tableNode) {\n  if (lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection)) {\n    const isAnchorInside = tableNode.isParentOf(selection.anchor.getNode());\n    const isFocusInside = tableNode.isParentOf(selection.focus.getNode());\n    return isAnchorInside && isFocusInside;\n  }\n\n  return false;\n}\n\nfunction selectTableCellNode(tableCell, fromStart) {\n  if (fromStart) {\n    tableCell.selectStart();\n  } else {\n    tableCell.selectEnd();\n  }\n}\n\nconst BROWSER_BLUE_RGB = '172,206,247';\n\nfunction $addHighlightToDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n\n  const backgroundColor = node.getBackgroundColor();\n\n  if (backgroundColor === null) {\n    element.style.setProperty('background-color', `rgb(${BROWSER_BLUE_RGB})`);\n  } else {\n    element.style.setProperty('background-image', `linear-gradient(to right, rgba(${BROWSER_BLUE_RGB},0.85), rgba(${BROWSER_BLUE_RGB},0.85))`);\n  }\n\n  element.style.setProperty('caret-color', 'transparent');\n}\n\nfunction $removeHighlightFromDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n\n  const backgroundColor = node.getBackgroundColor();\n\n  if (backgroundColor === null) {\n    element.style.removeProperty('background-color');\n  }\n\n  element.style.removeProperty('background-image');\n  element.style.removeProperty('caret-color');\n}\n\nfunction $findCellNode(node) {\n  const cellNode = utils.$findMatchingParent(node, $isTableCellNode);\n  return $isTableCellNode(cellNode) ? cellNode : null;\n}\n\nfunction $findTableNode(node) {\n  const tableNode = utils.$findMatchingParent(node, $isTableNode);\n  return $isTableNode(tableNode) ? tableNode : null;\n}\n\nfunction $handleArrowKey(editor, event, direction, tableNode, tableSelection) {\n  const selection = lexical.$getSelection();\n\n  if (!$isSelectionInTable(selection, tableNode)) {\n    return false;\n  }\n\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed()) {\n    // Horizontal move between cels seem to work well without interruption\n    // so just exit early, and handle vertical moves\n    if (direction === 'backward' || direction === 'forward') {\n      return false;\n    }\n\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n\n    if (!$isTableCellNode(anchorCellNode) || !anchorCellNode.is(focusCellNode)) {\n      return false;\n    }\n\n    const anchorCellDom = editor.getElementByKey(anchorCellNode.__key);\n    const anchorDOM = editor.getElementByKey(anchor.key);\n\n    if (anchorDOM == null || anchorCellDom == null) {\n      return false;\n    }\n\n    let edgeSelectionRect;\n\n    if (anchor.type === 'element') {\n      edgeSelectionRect = anchorDOM.getBoundingClientRect();\n    } else {\n      const domSelection = window.getSelection();\n\n      if (domSelection === null || domSelection.rangeCount === 0) {\n        return false;\n      }\n\n      const range = domSelection.getRangeAt(0);\n      edgeSelectionRect = range.getBoundingClientRect();\n    }\n\n    const edgeChild = direction === 'up' ? anchorCellNode.getFirstChild() : anchorCellNode.getLastChild();\n\n    if (edgeChild == null) {\n      return false;\n    }\n\n    const edgeChildDOM = editor.getElementByKey(edgeChild.__key);\n\n    if (edgeChildDOM == null) {\n      return false;\n    }\n\n    const edgeRect = edgeChildDOM.getBoundingClientRect();\n    const isExiting = direction === 'up' ? edgeRect.top > edgeSelectionRect.top - edgeSelectionRect.height : edgeSelectionRect.bottom + edgeSelectionRect.height > edgeRect.bottom;\n\n    if (isExiting) {\n      stopEvent(event);\n      const cords = tableNode.getCordsFromCellNode(anchorCellNode, tableSelection.grid);\n\n      if (event.shiftKey) {\n        const cell = tableNode.getCellFromCordsOrThrow(cords.x, cords.y, tableSelection.grid);\n        tableSelection.setAnchorCellForSelection(cell);\n        tableSelection.setFocusCellForSelection(cell, true);\n      } else {\n        return selectGridNodeInDirection(tableSelection, tableNode, cords.x, cords.y, direction);\n      }\n\n      return true;\n    }\n  } else if (lexical.DEPRECATED_$isGridSelection(selection)) {\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n\n    if (!$isTableCellNode(anchorCellNode) || !$isTableCellNode(focusCellNode)) {\n      return false;\n    }\n\n    stopEvent(event);\n\n    if (event.shiftKey) {\n      const cords = tableNode.getCordsFromCellNode(focusCellNode, tableSelection.grid);\n      return adjustFocusNodeInDirection(tableSelection, tableNode, cords.x, cords.y, direction);\n    } else {\n      focusCellNode.selectEnd();\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n  event.stopPropagation();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TableNode extends lexical.DEPRECATED_GridNode {\n  /** @internal */\n  static getType() {\n    return 'table';\n  }\n\n  static clone(node) {\n    return new TableNode(node.__key);\n  }\n\n  static importDOM() {\n    return {\n      table: _node => ({\n        conversion: convertTableElement,\n        priority: 1\n      })\n    };\n  }\n\n  static importJSON(_serializedNode) {\n    return $createTableNode();\n  }\n\n  constructor(key) {\n    super(key);\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'table',\n      version: 1\n    };\n  }\n\n  createDOM(config, editor) {\n    const tableElement = document.createElement('table');\n    utils.addClassNamesToElement(tableElement, config.theme.table);\n    return tableElement;\n  }\n\n  updateDOM() {\n    return false;\n  }\n\n  exportDOM(editor) {\n    return { ...super.exportDOM(editor),\n      after: tableElement => {\n        if (tableElement) {\n          const newElement = tableElement.cloneNode();\n          const colGroup = document.createElement('colgroup');\n          const tBody = document.createElement('tbody');\n\n          if (utils.isHTMLElement(tableElement)) {\n            tBody.append(...tableElement.children);\n          }\n\n          const firstRow = this.getFirstChildOrThrow();\n\n          if (!$isTableRowNode(firstRow)) {\n            throw new Error('Expected to find row node.');\n          }\n\n          const colCount = firstRow.getChildrenSize();\n\n          for (let i = 0; i < colCount; i++) {\n            const col = document.createElement('col');\n            colGroup.append(col);\n          }\n\n          newElement.replaceChildren(colGroup, tBody);\n          return newElement;\n        }\n      }\n    };\n  } // TODO 0.10 deprecate\n\n\n  canExtractContents() {\n    return false;\n  }\n\n  canBeEmpty() {\n    return false;\n  }\n\n  isShadowRoot() {\n    return true;\n  }\n\n  getCordsFromCellNode(tableCellNode, grid) {\n    const {\n      rows,\n      cells\n    } = grid;\n\n    for (let y = 0; y < rows; y++) {\n      const row = cells[y];\n\n      if (row == null) {\n        continue;\n      }\n\n      const x = row.findIndex(cell => {\n        if (!cell) return;\n        const {\n          elem\n        } = cell;\n        const cellNode = lexical.$getNearestNodeFromDOMNode(elem);\n        return cellNode === tableCellNode;\n      });\n\n      if (x !== -1) {\n        return {\n          x,\n          y\n        };\n      }\n    }\n\n    throw new Error('Cell not found in table.');\n  }\n\n  getCellFromCords(x, y, grid) {\n    const {\n      cells\n    } = grid;\n    const row = cells[y];\n\n    if (row == null) {\n      return null;\n    }\n\n    const cell = row[x];\n\n    if (cell == null) {\n      return null;\n    }\n\n    return cell;\n  }\n\n  getCellFromCordsOrThrow(x, y, grid) {\n    const cell = this.getCellFromCords(x, y, grid);\n\n    if (!cell) {\n      throw new Error('Cell not found at cords.');\n    }\n\n    return cell;\n  }\n\n  getCellNodeFromCords(x, y, grid) {\n    const cell = this.getCellFromCords(x, y, grid);\n\n    if (cell == null) {\n      return null;\n    }\n\n    const node = lexical.$getNearestNodeFromDOMNode(cell.elem);\n\n    if ($isTableCellNode(node)) {\n      return node;\n    }\n\n    return null;\n  }\n\n  getCellNodeFromCordsOrThrow(x, y, grid) {\n    const node = this.getCellNodeFromCords(x, y, grid);\n\n    if (!node) {\n      throw new Error('Node at cords not TableCellNode.');\n    }\n\n    return node;\n  }\n\n  canSelectBefore() {\n    return true;\n  }\n\n  canIndent() {\n    return false;\n  }\n\n}\nfunction $getElementGridForTableNode(editor, tableNode) {\n  const tableElement = editor.getElementByKey(tableNode.getKey());\n\n  if (tableElement == null) {\n    throw new Error('Table Element Not Found');\n  }\n\n  return getTableGrid(tableElement);\n}\nfunction convertTableElement(_domNode) {\n  return {\n    node: $createTableNode()\n  };\n}\nfunction $createTableNode() {\n  return lexical.$applyNodeReplacement(new TableNode());\n}\nfunction $isTableNode(node) {\n  return node instanceof TableNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $createTableNodeWithDimensions(rowCount, columnCount, includeHeaders = true) {\n  const tableNode = $createTableNode();\n\n  for (let iRow = 0; iRow < rowCount; iRow++) {\n    const tableRowNode = $createTableRowNode();\n\n    for (let iColumn = 0; iColumn < columnCount; iColumn++) {\n      let headerState = TableCellHeaderStates.NO_STATUS;\n\n      if (typeof includeHeaders === 'object') {\n        if (iRow === 0 && includeHeaders.rows) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0 && includeHeaders.columns) headerState |= TableCellHeaderStates.COLUMN;\n      } else if (includeHeaders) {\n        if (iRow === 0) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0) headerState |= TableCellHeaderStates.COLUMN;\n      }\n\n      const tableCellNode = $createTableCellNode(headerState);\n      const paragraphNode = lexical.$createParagraphNode();\n      paragraphNode.append(lexical.$createTextNode());\n      tableCellNode.append(paragraphNode);\n      tableRowNode.append(tableCellNode);\n    }\n\n    tableNode.append(tableRowNode);\n  }\n\n  return tableNode;\n}\nfunction $getTableCellNodeFromLexicalNode(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableCellNode(n));\n\n  if ($isTableCellNode(node)) {\n    return node;\n  }\n\n  return null;\n}\nfunction $getTableRowNodeFromTableCellNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableRowNode(n));\n\n  if ($isTableRowNode(node)) {\n    return node;\n  }\n\n  throw new Error('Expected table cell to be inside of table row.');\n}\nfunction $getTableNodeFromLexicalNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableNode(n));\n\n  if ($isTableNode(node)) {\n    return node;\n  }\n\n  throw new Error('Expected table cell to be inside of table.');\n}\nfunction $getTableRowIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableRowNode);\n  return tableNode.getChildren().findIndex(n => n.is(tableRowNode));\n}\nfunction $getTableColumnIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  return tableRowNode.getChildren().findIndex(n => n.is(tableCellNode));\n}\nfunction $getTableCellSiblingsFromTableCellNode(tableCellNode, grid) {\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n  const {\n    x,\n    y\n  } = tableNode.getCordsFromCellNode(tableCellNode, grid);\n  return {\n    above: tableNode.getCellNodeFromCords(x, y - 1, grid),\n    below: tableNode.getCellNodeFromCords(x, y + 1, grid),\n    left: tableNode.getCellNodeFromCords(x - 1, y, grid),\n    right: tableNode.getCellNodeFromCords(x + 1, y, grid)\n  };\n}\nfunction $removeTableRowAtIndex(tableNode, indexToDelete) {\n  const tableRows = tableNode.getChildren();\n\n  if (indexToDelete >= tableRows.length || indexToDelete < 0) {\n    throw new Error('Expected table cell to be inside of table row.');\n  }\n\n  const targetRowNode = tableRows[indexToDelete];\n  targetRowNode.remove();\n  return tableNode;\n}\nfunction $insertTableRow(tableNode, targetIndex, shouldInsertAfter = true, rowCount, grid) {\n  const tableRows = tableNode.getChildren();\n\n  if (targetIndex >= tableRows.length || targetIndex < 0) {\n    throw new Error('Table row target index out of range');\n  }\n\n  const targetRowNode = tableRows[targetIndex];\n\n  if ($isTableRowNode(targetRowNode)) {\n    for (let r = 0; r < rowCount; r++) {\n      const tableRowCells = targetRowNode.getChildren();\n      const tableColumnCount = tableRowCells.length;\n      const newTableRowNode = $createTableRowNode();\n\n      for (let c = 0; c < tableColumnCount; c++) {\n        const tableCellFromTargetRow = tableRowCells[c];\n\n        if (!$isTableCellNode(tableCellFromTargetRow)) {\n          throw Error(`Expected table cell`);\n        }\n\n        const {\n          above,\n          below\n        } = $getTableCellSiblingsFromTableCellNode(tableCellFromTargetRow, grid);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        const width = above && above.getWidth() || below && below.getWidth() || undefined;\n\n        if (above && above.hasHeaderState(TableCellHeaderStates.COLUMN) || below && below.hasHeaderState(TableCellHeaderStates.COLUMN)) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n\n        const tableCellNode = $createTableCellNode(headerState, 1, width);\n        tableCellNode.append(lexical.$createParagraphNode());\n        newTableRowNode.append(tableCellNode);\n      }\n\n      if (shouldInsertAfter) {\n        targetRowNode.insertAfter(newTableRowNode);\n      } else {\n        targetRowNode.insertBefore(newTableRowNode);\n      }\n    }\n  } else {\n    throw new Error('Row before insertion index does not exist.');\n  }\n\n  return tableNode;\n}\nfunction $insertTableRow__EXPERIMENTAL(insertAfter = true) {\n  const selection = lexical.$getSelection();\n\n  if (!(lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n\n  const focus = selection.focus.getNode();\n  const [focusCell,, grid] = lexical.DEPRECATED_$getNodeTriplet(focus);\n  const [gridMap, focusCellMap] = lexical.DEPRECATED_$computeGridMap(grid, focusCell, focusCell);\n  const columnCount = gridMap[0].length;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n\n  if (insertAfter) {\n    const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n    const focusEndRowMap = gridMap[focusEndRow];\n    const newRow = $createTableRowNode();\n\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusEndRowMap[i];\n\n      if (startRow + cell.__rowSpan - 1 <= focusEndRow) {\n        newRow.append($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n\n    const focusEndRowNode = grid.getChildAtIndex(focusEndRow);\n\n    if (!lexical.DEPRECATED_$isGridRowNode(focusEndRowNode)) {\n      throw Error(`focusEndRow is not a GridRowNode`);\n    }\n\n    focusEndRowNode.insertAfter(newRow);\n  } else {\n    const focusStartRowMap = gridMap[focusStartRow];\n    const newRow = $createTableRowNode();\n\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusStartRowMap[i];\n\n      if (startRow === focusStartRow) {\n        newRow.append($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n\n    const focusStartRowNode = grid.getChildAtIndex(focusStartRow);\n\n    if (!lexical.DEPRECATED_$isGridRowNode(focusStartRowNode)) {\n      throw Error(`focusEndRow is not a GridRowNode`);\n    }\n\n    focusStartRowNode.insertBefore(newRow);\n  }\n}\nfunction $insertTableColumn(tableNode, targetIndex, shouldInsertAfter = true, columnCount, grid) {\n  const tableRows = tableNode.getChildren();\n\n  for (let r = 0; r < tableRows.length; r++) {\n    const currentTableRowNode = tableRows[r];\n\n    if ($isTableRowNode(currentTableRowNode)) {\n      for (let c = 0; c < columnCount; c++) {\n        const tableRowChildren = currentTableRowNode.getChildren();\n\n        if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n          throw new Error('Table column target index out of range');\n        }\n\n        const targetCell = tableRowChildren[targetIndex];\n\n        if (!$isTableCellNode(targetCell)) {\n          throw Error(`Expected table cell`);\n        }\n\n        const {\n          left,\n          right\n        } = $getTableCellSiblingsFromTableCellNode(targetCell, grid);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n\n        if (left && left.hasHeaderState(TableCellHeaderStates.ROW) || right && right.hasHeaderState(TableCellHeaderStates.ROW)) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n\n        const newTableCell = $createTableCellNode(headerState);\n        newTableCell.append(lexical.$createParagraphNode());\n\n        if (shouldInsertAfter) {\n          targetCell.insertAfter(newTableCell);\n        } else {\n          targetCell.insertBefore(newTableCell);\n        }\n      }\n    }\n  }\n\n  return tableNode;\n}\nfunction $insertTableColumn__EXPERIMENTAL(insertAfter = true) {\n  const selection = lexical.$getSelection();\n\n  if (!(lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell] = lexical.DEPRECATED_$getNodeTriplet(anchor);\n  const [focusCell,, grid] = lexical.DEPRECATED_$getNodeTriplet(focus);\n  const [gridMap, focusCellMap, anchorCellMap] = lexical.DEPRECATED_$computeGridMap(grid, focusCell, anchorCell);\n  const rowCount = gridMap.length;\n  const startColumn = insertAfter ? Math.max(focusCellMap.startColumn, anchorCellMap.startColumn) : Math.min(focusCellMap.startColumn, anchorCellMap.startColumn);\n  const insertAfterColumn = insertAfter ? startColumn + focusCell.__colSpan - 1 : startColumn - 1;\n  const gridFirstChild = grid.getFirstChild();\n\n  if (!lexical.DEPRECATED_$isGridRowNode(gridFirstChild)) {\n    throw Error(`Expected firstTable child to be a row`);\n  }\n\n  let firstInsertedCell = null;\n\n  function $createTableCellNodeForInsertTableColumn() {\n    const cell = $createTableCellNode(TableCellHeaderStates.NO_STATUS).append(lexical.$createParagraphNode());\n\n    if (firstInsertedCell === null) {\n      firstInsertedCell = cell;\n    }\n\n    return cell;\n  }\n\n  let loopRow = gridFirstChild;\n\n  rowLoop: for (let i = 0; i < rowCount; i++) {\n    if (i !== 0) {\n      const currentRow = loopRow.getNextSibling();\n\n      if (!lexical.DEPRECATED_$isGridRowNode(currentRow)) {\n        throw Error(`Expected row nextSibling to be a row`);\n      }\n\n      loopRow = currentRow;\n    }\n\n    const rowMap = gridMap[i];\n\n    if (insertAfterColumn < 0) {\n      $insertFirst(loopRow, $createTableCellNodeForInsertTableColumn());\n      continue;\n    }\n\n    const {\n      cell: currentCell,\n      startColumn: currentStartColumn,\n      startRow: currentStartRow\n    } = rowMap[insertAfterColumn];\n\n    if (currentStartColumn + currentCell.__colSpan - 1 <= insertAfterColumn) {\n      let insertAfterCell = currentCell;\n      let insertAfterCellRowStart = currentStartRow;\n      let prevCellIndex = insertAfterColumn;\n\n      while (insertAfterCellRowStart !== i && insertAfterCell.__rowSpan > 1) {\n        prevCellIndex -= currentCell.__colSpan;\n\n        if (prevCellIndex >= 0) {\n          const {\n            cell: cell_,\n            startRow: startRow_\n          } = rowMap[prevCellIndex];\n          insertAfterCell = cell_;\n          insertAfterCellRowStart = startRow_;\n        } else {\n          loopRow.append($createTableCellNodeForInsertTableColumn());\n          continue rowLoop;\n        }\n      }\n\n      insertAfterCell.insertAfter($createTableCellNodeForInsertTableColumn());\n    } else {\n      currentCell.setColSpan(currentCell.__colSpan + 1);\n    }\n  }\n\n  if (firstInsertedCell !== null) {\n    $moveSelectionToCell(firstInsertedCell);\n  }\n}\nfunction $deleteTableColumn(tableNode, targetIndex) {\n  const tableRows = tableNode.getChildren();\n\n  for (let i = 0; i < tableRows.length; i++) {\n    const currentTableRowNode = tableRows[i];\n\n    if ($isTableRowNode(currentTableRowNode)) {\n      const tableRowChildren = currentTableRowNode.getChildren();\n\n      if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n        throw new Error('Table column target index out of range');\n      }\n\n      tableRowChildren[targetIndex].remove();\n    }\n  }\n\n  return tableNode;\n}\nfunction $deleteTableRow__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n\n  if (!(lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = lexical.DEPRECATED_$getNodeTriplet(anchor);\n  const [focusCell] = lexical.DEPRECATED_$getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = lexical.DEPRECATED_$computeGridMap(grid, anchorCell, focusCell);\n  const {\n    startRow: anchorStartRow\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n\n  if (gridMap.length === focusEndRow - anchorStartRow + 1) {\n    // Empty grid\n    grid.remove();\n    return;\n  }\n\n  const columnCount = gridMap[0].length;\n  const nextRow = gridMap[focusEndRow + 1];\n  const nextRowNode = grid.getChildAtIndex(focusEndRow + 1);\n\n  for (let row = focusEndRow; row >= anchorStartRow; row--) {\n    for (let column = columnCount - 1; column >= 0; column--) {\n      const {\n        cell,\n        startRow: cellStartRow,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n\n      if (cellStartColumn !== column) {\n        // Don't repeat work for the same Cell\n        continue;\n      } // Rows overflowing top have to be trimmed\n\n\n      if (row === anchorStartRow && cellStartRow < anchorStartRow) {\n        cell.setRowSpan(cell.__rowSpan - (cellStartRow - anchorStartRow));\n      } // Rows overflowing bottom have to be trimmed and moved to the next row\n\n\n      if (cellStartRow >= anchorStartRow && cellStartRow + cell.__rowSpan - 1 > focusEndRow) {\n        cell.setRowSpan(cell.__rowSpan - (focusEndRow - cellStartRow + 1));\n\n        if (!(nextRowNode !== null)) {\n          throw Error(`Expected nextRowNode not to be null`);\n        }\n\n        if (column === 0) {\n          $insertFirst(nextRowNode, cell);\n        } else {\n          const {\n            cell: previousCell\n          } = nextRow[column - 1];\n          previousCell.insertAfter(cell);\n        }\n      }\n    }\n\n    const rowNode = grid.getChildAtIndex(row);\n\n    if (!lexical.DEPRECATED_$isGridRowNode(rowNode)) {\n      throw Error(`Expected GridNode childAtIndex(${String(row)}) to be RowNode`);\n    }\n\n    rowNode.remove();\n  }\n\n  if (nextRow !== undefined) {\n    const {\n      cell\n    } = nextRow[0];\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = gridMap[anchorStartRow - 1];\n    const {\n      cell\n    } = previousRow[0];\n    $moveSelectionToCell(cell);\n  }\n}\nfunction $deleteTableColumn__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n\n  if (!(lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = lexical.DEPRECATED_$getNodeTriplet(anchor);\n  const [focusCell] = lexical.DEPRECATED_$getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = lexical.DEPRECATED_$computeGridMap(grid, anchorCell, focusCell);\n  const {\n    startColumn: anchorStartColumn\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow,\n    startColumn: focusStartColumn\n  } = focusCellMap;\n  const startColumn = Math.min(anchorStartColumn, focusStartColumn);\n  const endColumn = Math.max(anchorStartColumn + anchorCell.__colSpan - 1, focusStartColumn + focusCell.__colSpan - 1);\n  const selectedColumnCount = endColumn - startColumn + 1;\n  const columnCount = gridMap[0].length;\n\n  if (columnCount === endColumn - startColumn + 1) {\n    // Empty grid\n    grid.selectPrevious();\n    grid.remove();\n    return;\n  }\n\n  const rowCount = gridMap.length;\n\n  for (let row = 0; row < rowCount; row++) {\n    for (let column = startColumn; column <= endColumn; column++) {\n      const {\n        cell,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n\n      if (cellStartColumn < startColumn) {\n        if (column === startColumn) {\n          const overflowLeft = startColumn - cellStartColumn; // Overflowing left\n\n          cell.setColSpan(cell.__colSpan - // Possible overflow right too\n          Math.min(selectedColumnCount, cell.__colSpan - overflowLeft));\n        }\n      } else if (cellStartColumn + cell.__colSpan - 1 > endColumn) {\n        if (column === endColumn) {\n          // Overflowing right\n          const inSelectedArea = endColumn - cellStartColumn + 1;\n          cell.setColSpan(cell.__colSpan - inSelectedArea);\n        }\n      } else {\n        cell.remove();\n      }\n    }\n  }\n\n  const focusRowMap = gridMap[focusStartRow];\n  const nextColumn = focusRowMap[focusStartColumn + focusCell.__colSpan];\n\n  if (nextColumn !== undefined) {\n    const {\n      cell\n    } = nextColumn;\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = focusRowMap[focusStartColumn - 1];\n    const {\n      cell\n    } = previousRow;\n    $moveSelectionToCell(cell);\n  }\n}\n\nfunction $moveSelectionToCell(cell) {\n  const firstDescendant = cell.getFirstDescendant();\n\n  if (!(firstDescendant !== null)) {\n    throw Error(`Unexpected empty cell`);\n  }\n\n  firstDescendant.getParentOrThrow().selectStart();\n}\n\nfunction $insertFirst(parent, node) {\n  const firstChild = parent.getFirstChild();\n\n  if (firstChild !== null) {\n    firstChild.insertBefore(node);\n  } else {\n    parent.append(node);\n  }\n}\n\nfunction $unmergeCell() {\n  const selection = lexical.$getSelection();\n\n  if (!(lexical.$isRangeSelection(selection) || lexical.DEPRECATED_$isGridSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n\n  const anchor = selection.anchor.getNode();\n  const [cell, row, grid] = lexical.DEPRECATED_$getNodeTriplet(anchor);\n  const colSpan = cell.__colSpan;\n  const rowSpan = cell.__rowSpan;\n\n  if (colSpan > 1) {\n    for (let i = 1; i < colSpan; i++) {\n      cell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n    }\n\n    cell.setColSpan(1);\n  }\n\n  if (rowSpan > 1) {\n    const [map, cellMap] = lexical.DEPRECATED_$computeGridMap(grid, cell, cell);\n    const {\n      startColumn,\n      startRow\n    } = cellMap;\n    let currentRowNode;\n\n    for (let i = 1; i < rowSpan; i++) {\n      const currentRow = startRow + i;\n      const currentRowMap = map[currentRow];\n      currentRowNode = (currentRowNode || row).getNextSibling();\n\n      if (!lexical.DEPRECATED_$isGridRowNode(currentRowNode)) {\n        throw Error(`Expected row next sibling to be a row`);\n      }\n\n      let insertAfterCell = null;\n\n      for (let column = 0; column < startColumn; column++) {\n        const currentCellMap = currentRowMap[column];\n        const currentCell = currentCellMap.cell;\n\n        if (currentCellMap.startRow === currentRow) {\n          insertAfterCell = currentCell;\n        }\n\n        if (currentCell.__colSpan > 1) {\n          column += currentCell.__colSpan - 1;\n        }\n      }\n\n      if (insertAfterCell === null) {\n        for (let j = 0; j < colSpan; j++) {\n          $insertFirst(currentRowNode, $createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      } else {\n        for (let j = 0; j < colSpan; j++) {\n          insertAfterCell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      }\n    }\n\n    cell.setRowSpan(1);\n  }\n}\n\n/** @module @lexical/table */\nconst INSERT_TABLE_COMMAND = lexical.createCommand('INSERT_TABLE_COMMAND');\n\nexports.$createTableCellNode = $createTableCellNode;\nexports.$createTableNode = $createTableNode;\nexports.$createTableNodeWithDimensions = $createTableNodeWithDimensions;\nexports.$createTableRowNode = $createTableRowNode;\nexports.$deleteTableColumn = $deleteTableColumn;\nexports.$deleteTableColumn__EXPERIMENTAL = $deleteTableColumn__EXPERIMENTAL;\nexports.$deleteTableRow__EXPERIMENTAL = $deleteTableRow__EXPERIMENTAL;\nexports.$getElementGridForTableNode = $getElementGridForTableNode;\nexports.$getTableCellNodeFromLexicalNode = $getTableCellNodeFromLexicalNode;\nexports.$getTableColumnIndexFromTableCellNode = $getTableColumnIndexFromTableCellNode;\nexports.$getTableNodeFromLexicalNodeOrThrow = $getTableNodeFromLexicalNodeOrThrow;\nexports.$getTableRowIndexFromTableCellNode = $getTableRowIndexFromTableCellNode;\nexports.$getTableRowNodeFromTableCellNodeOrThrow = $getTableRowNodeFromTableCellNodeOrThrow;\nexports.$insertTableColumn = $insertTableColumn;\nexports.$insertTableColumn__EXPERIMENTAL = $insertTableColumn__EXPERIMENTAL;\nexports.$insertTableRow = $insertTableRow;\nexports.$insertTableRow__EXPERIMENTAL = $insertTableRow__EXPERIMENTAL;\nexports.$isTableCellNode = $isTableCellNode;\nexports.$isTableNode = $isTableNode;\nexports.$isTableRowNode = $isTableRowNode;\nexports.$removeTableRowAtIndex = $removeTableRowAtIndex;\nexports.$unmergeCell = $unmergeCell;\nexports.INSERT_TABLE_COMMAND = INSERT_TABLE_COMMAND;\nexports.TableCellHeaderStates = TableCellHeaderStates;\nexports.TableCellNode = TableCellNode;\nexports.TableNode = TableNode;\nexports.TableRowNode = TableRowNode;\nexports.TableSelection = TableSelection;\nexports.applyTableHandlers = applyTableHandlers;\nexports.getCellFromTarget = getCellFromTarget;\nexports.getTableSelectionFromTableElement = getTableSelectionFromTableElement;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalTable = process.env.NODE_ENV === 'development' ? require('./LexicalTable.dev.js') : require('./LexicalTable.prod.js')\nmodule.exports = LexicalTable;"],
  "mappings": "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",
  "names": []
}
