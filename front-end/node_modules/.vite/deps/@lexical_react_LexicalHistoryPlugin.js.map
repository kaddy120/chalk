{
  "version": 3,
  "sources": ["../../../../node_modules/@lexical/history/LexicalHistory.dev.js", "../../../../node_modules/@lexical/history/LexicalHistory.js", "../../../../node_modules/@lexical/react/LexicalHistoryPlugin.dev.js", "../../../../node_modules/@lexical/react/LexicalHistoryPlugin.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/** @module @lexical/history */\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\n\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n\n    if (dirtyElement !== undefined && !lexical.$isRootNode(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n\n  return nodes;\n}\n\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n\n  if (!lexical.$isRangeSelection(nextSelection) || !lexical.$isRangeSelection(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  } // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n\n\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && lexical.$isTextNode(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n\n    return OTHER;\n  }\n\n  const nextDirtyNode = dirtyNodes[0];\n\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n\n  if (!lexical.$isTextNode(prevDirtyNode) || !lexical.$isTextNode(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n\n  if (prevText === nextText) {\n    return OTHER;\n  }\n\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n\n  return OTHER;\n}\n\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n\n  const nextNode = nextEditorState._nodeMap.get(key);\n\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  let isDeletingLine = false;\n\n  if (lexical.$isRangeSelection(prevSelection) && lexical.$isRangeSelection(nextSelection)) {\n    isDeletingLine = prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  }\n\n  if (!isDeletingLine && lexical.$isTextNode(prevNode) && lexical.$isTextNode(nextNode)) {\n    return prevNode.__type === nextNode.__type && prevNode.__text === nextNode.__text && prevNode.__mode === nextNode.__mode && prevNode.__detail === nextNode.__detail && prevNode.__style === nextNode.__style && prevNode.__format === nextNode.__format && prevNode.__parent === nextNode.__parent;\n  }\n\n  return false;\n}\n\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now(); // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      } // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n\n\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n\n      return HISTORY_PUSH;\n    })();\n\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\n\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n    }\n\n    const historyStateEntry = redoStack.pop();\n\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    }\n\n    historyState.current = historyStateEntry || null;\n\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\n\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, true);\n    }\n\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    }\n\n    historyState.current = historyStateEntry || null;\n\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\n\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\n\n\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n      }\n\n      if (current !== null) {\n        undoStack.push({ ...current\n        });\n        editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    } // Else we merge\n\n\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n\n  const unregisterCommandListener = utils.mergeRegister(editor.registerCommand(lexical.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  const unregisterUpdateListener = editor.registerUpdateListener(applyChange);\n  return () => {\n    unregisterCommandListener();\n    unregisterUpdateListener();\n  };\n}\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\n\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\nexports.createEmptyHistoryState = createEmptyHistoryState;\nexports.registerHistory = registerHistory;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalHistory = process.env.NODE_ENV === 'development' ? require('./LexicalHistory.dev.js') : require('./LexicalHistory.prod.js')\nmodule.exports = LexicalHistory;", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar history = require('@lexical/history');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction useHistory(editor, externalHistoryState, delay = 1000) {\n  const historyState = react.useMemo(() => externalHistoryState || history.createEmptyHistoryState(), [externalHistoryState]);\n  react.useEffect(() => {\n    return history.registerHistory(editor, historyState, delay);\n  }, [delay, editor, historyState]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction HistoryPlugin({\n  externalHistoryState\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  useHistory(editor, externalHistoryState);\n  return null;\n}\n\nexports.createEmptyHistoryState = history.createEmptyHistoryState;\nexports.HistoryPlugin = HistoryPlugin;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'\nconst LexicalHistoryPlugin = process.env.NODE_ENV === 'development' ? require('./LexicalHistoryPlugin.dev.js') : require('./LexicalHistoryPlugin.prod.js')\nmodule.exports = LexicalHistoryPlugin;"],
  "mappings": "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",
  "names": []
}
